# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LyricsRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, mode: int=None, danceability: float=None, energy: float=None, duration: float=None, tempo: float=None, title: str=None, artist: str=None, year: int=None, tags: List[str]=None):  # noqa: E501
        """LyricsRequest - a model defined in Swagger

        :param mode: The mode of this LyricsRequest.  # noqa: E501
        :type mode: int
        :param danceability: The danceability of this LyricsRequest.  # noqa: E501
        :type danceability: float
        :param energy: The energy of this LyricsRequest.  # noqa: E501
        :type energy: float
        :param duration: The duration of this LyricsRequest.  # noqa: E501
        :type duration: float
        :param tempo: The tempo of this LyricsRequest.  # noqa: E501
        :type tempo: float
        :param title: The title of this LyricsRequest.  # noqa: E501
        :type title: str
        :param artist: The artist of this LyricsRequest.  # noqa: E501
        :type artist: str
        :param year: The year of this LyricsRequest.  # noqa: E501
        :type year: int
        :param tags: The tags of this LyricsRequest.  # noqa: E501
        :type tags: List[str]
        """
        self.swagger_types = {
            'mode': int,
            'danceability': float,
            'energy': float,
            'duration': float,
            'tempo': float,
            'title': str,
            'artist': str,
            'year': int,
            'tags': List[str]
        }

        self.attribute_map = {
            'mode': 'mode',
            'danceability': 'danceability',
            'energy': 'energy',
            'duration': 'duration',
            'tempo': 'tempo',
            'title': 'title',
            'artist': 'artist',
            'year': 'year',
            'tags': 'tags'
        }

        self._mode = mode
        self._danceability = danceability
        self._energy = energy
        self._duration = duration
        self._tempo = tempo
        self._title = title
        self._artist = artist
        self._year = year
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'LyricsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LyricsRequest of this LyricsRequest.  # noqa: E501
        :rtype: LyricsRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mode(self) -> int:
        """Gets the mode of this LyricsRequest.

        Song mode. 0 if minor, 1 if major.  # noqa: E501

        :return: The mode of this LyricsRequest.
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode: int):
        """Sets the mode of this LyricsRequest.

        Song mode. 0 if minor, 1 if major.  # noqa: E501

        :param mode: The mode of this LyricsRequest.
        :type mode: int
        """
        if mode is not None and mode > 1:  # noqa: E501
            raise ValueError("Invalid value for `mode`, must be a value less than or equal to `1`")  # noqa: E501
        if mode is not None and mode < 0:  # noqa: E501
            raise ValueError("Invalid value for `mode`, must be a value greater than or equal to `0`")  # noqa: E501

        self._mode = mode

    @property
    def danceability(self) -> float:
        """Gets the danceability of this LyricsRequest.


        :return: The danceability of this LyricsRequest.
        :rtype: float
        """
        return self._danceability

    @danceability.setter
    def danceability(self, danceability: float):
        """Sets the danceability of this LyricsRequest.


        :param danceability: The danceability of this LyricsRequest.
        :type danceability: float
        """
        if danceability is not None and danceability > 1:  # noqa: E501
            raise ValueError("Invalid value for `danceability`, must be a value less than or equal to `1`")  # noqa: E501
        if danceability is not None and danceability < 0:  # noqa: E501
            raise ValueError("Invalid value for `danceability`, must be a value greater than or equal to `0`")  # noqa: E501

        self._danceability = danceability

    @property
    def energy(self) -> float:
        """Gets the energy of this LyricsRequest.


        :return: The energy of this LyricsRequest.
        :rtype: float
        """
        return self._energy

    @energy.setter
    def energy(self, energy: float):
        """Sets the energy of this LyricsRequest.


        :param energy: The energy of this LyricsRequest.
        :type energy: float
        """
        if energy is not None and energy > 1:  # noqa: E501
            raise ValueError("Invalid value for `energy`, must be a value less than or equal to `1`")  # noqa: E501
        if energy is not None and energy < 0:  # noqa: E501
            raise ValueError("Invalid value for `energy`, must be a value greater than or equal to `0`")  # noqa: E501

        self._energy = energy

    @property
    def duration(self) -> float:
        """Gets the duration of this LyricsRequest.


        :return: The duration of this LyricsRequest.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration: float):
        """Sets the duration of this LyricsRequest.


        :param duration: The duration of this LyricsRequest.
        :type duration: float
        """
        if duration is not None and duration < 0:  # noqa: E501
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `0`")  # noqa: E501

        self._duration = duration

    @property
    def tempo(self) -> float:
        """Gets the tempo of this LyricsRequest.


        :return: The tempo of this LyricsRequest.
        :rtype: float
        """
        return self._tempo

    @tempo.setter
    def tempo(self, tempo: float):
        """Sets the tempo of this LyricsRequest.


        :param tempo: The tempo of this LyricsRequest.
        :type tempo: float
        """
        if tempo is not None and tempo < 0:  # noqa: E501
            raise ValueError("Invalid value for `tempo`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tempo = tempo

    @property
    def title(self) -> str:
        """Gets the title of this LyricsRequest.

        Song title.  # noqa: E501

        :return: The title of this LyricsRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this LyricsRequest.

        Song title.  # noqa: E501

        :param title: The title of this LyricsRequest.
        :type title: str
        """

        self._title = title

    @property
    def artist(self) -> str:
        """Gets the artist of this LyricsRequest.

        Name of the artist.  # noqa: E501

        :return: The artist of this LyricsRequest.
        :rtype: str
        """
        return self._artist

    @artist.setter
    def artist(self, artist: str):
        """Sets the artist of this LyricsRequest.

        Name of the artist.  # noqa: E501

        :param artist: The artist of this LyricsRequest.
        :type artist: str
        """

        self._artist = artist

    @property
    def year(self) -> int:
        """Gets the year of this LyricsRequest.

        Year in which song was composed  # noqa: E501

        :return: The year of this LyricsRequest.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year: int):
        """Sets the year of this LyricsRequest.

        Year in which song was composed  # noqa: E501

        :param year: The year of this LyricsRequest.
        :type year: int
        """
        if year is not None and year > 2019:  # noqa: E501
            raise ValueError("Invalid value for `year`, must be a value less than or equal to `2019`")  # noqa: E501
        if year is not None and year < 1300:  # noqa: E501
            raise ValueError("Invalid value for `year`, must be a value greater than or equal to `1300`")  # noqa: E501

        self._year = year

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this LyricsRequest.

        Tags to be used as seed words for lyric generation.  # noqa: E501

        :return: The tags of this LyricsRequest.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this LyricsRequest.

        Tags to be used as seed words for lyric generation.  # noqa: E501

        :param tags: The tags of this LyricsRequest.
        :type tags: List[str]
        """

        self._tags = tags
